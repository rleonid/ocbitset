open Ctypes

module Invert (B: Cstubs.BINDINGS) (I: Cstubs_inverted.INTERNAL) =
  struct
    module Ignored =
      B(struct
        type 'a fn = 'a Ctypes.fn
        type _ result = unit
        type 'a return = 'a
        let foreign name fn = I.internal name fn (fun _ -> assert false)
        let foreign_value _ = failwith "foreign_value not supported"
        let returning = Ctypes.returning
        let (@->) = Ctypes.(@->)
      end)
  end

(*
There is a conflict with the 'const' full headers as defined in 'bitset.h' and
the ones generated by this code. I'm not certain if it is possible to annotate
the Ctypes function declarations with (const, or required) that might be
necessary to make the C compiler happy, so for now, including 'bitset.h'
should suffice, even though this may not be the most standard C. 

let write_declarations fmt (module B : Cstubs.BINDINGS) =
  Cstubs_inverted.write_c_header fmt ~prefix:"" (module Invert(B))
*)

let _ =
  let fmt = Format.formatter_of_out_channel (open_out "src/lib/cbitset_stubs.c") in
  Format.fprintf fmt "#include <stdio.h>@.";
  Format.fprintf fmt "#include \"bitset.h\"@.";

  (*write_declarations fmt (module Cbitset_bindings.C); *)
  Cstubs.write_c fmt ~prefix:"caml_" (module Cbitset_bindings.C);

  let fmt = Format.formatter_of_out_channel (open_out "src/lib/cbitset_generated.ml") in
  Cstubs.write_ml fmt ~prefix:"caml_" (module Cbitset_bindings.C)
